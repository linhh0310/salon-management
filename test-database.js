const db = require('./config/db');
const User = require('./models/userModel');

async function testDatabase() {
    try {
        console.log('üß™ B·∫Øt ƒë·∫ßu test database...');
        
        // Test 1: Ki·ªÉm tra k·∫øt n·ªëi database
        console.log('\n1Ô∏è‚É£ Test k·∫øt n·ªëi database...');
        const [rows] = await db.execute('SELECT 1 as test');
        console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng:', rows[0]);
        
        // Test 2: Ki·ªÉm tra b·∫£ng users
        console.log('\n2Ô∏è‚É£ Test b·∫£ng users...');
        const [userRows] = await db.execute('DESCRIBE users');
        console.log('‚úÖ C·∫•u tr√∫c b·∫£ng users:');
        userRows.forEach(row => {
            console.log(`   - ${row.Field}: ${row.Type} ${row.Null === 'NO' ? 'NOT NULL' : ''} ${row.Key === 'PRI' ? 'PRIMARY KEY' : ''} ${row.Key === 'UNI' ? 'UNIQUE' : ''}`);
        });
        
        // Test 3: Ki·ªÉm tra d·ªØ li·ªáu hi·ªán c√≥
        console.log('\n3Ô∏è‚É£ Test d·ªØ li·ªáu users hi·ªán c√≥...');
        const [existingUsers] = await db.execute('SELECT id, name, email, role FROM users LIMIT 5');
        console.log('‚úÖ Users hi·ªán c√≥:', existingUsers);
        
        // Test 4: Test t·∫°o user m·ªõi
        console.log('\n4Ô∏è‚É£ Test t·∫°o user m·ªõi...');
        const testUserData = {
            name: 'Test User ' + Date.now(),
            email: 'test' + Date.now() + '@example.com',
            phone: '0123456789',
            password: '123456',
            role: 'user'
        };
        
        console.log('üìã D·ªØ li·ªáu test:', testUserData);
        
        try {
            const userId = await User.create(testUserData);
            console.log('‚úÖ T·∫°o user th√†nh c√¥ng v·ªõi ID:', userId);
            
            // Test 5: Ki·ªÉm tra user v·ª´a t·∫°o
            console.log('\n5Ô∏è‚É£ Test t√¨m user v·ª´a t·∫°o...');
            const createdUser = await User.findByEmail(testUserData.email);
            console.log('‚úÖ User v·ª´a t·∫°o:', {
                id: createdUser.id,
                name: createdUser.name,
                email: createdUser.email,
                role: createdUser.role
            });
            
            // Test 6: X√≥a user test
            console.log('\n6Ô∏è‚É£ Test x√≥a user test...');
            await User.delete(userId);
            console.log('‚úÖ ƒê√£ x√≥a user test');
            
        } catch (createError) {
            console.error('‚ùå L·ªói khi t·∫°o user:', createError);
            console.error('‚ùå Error code:', createError.code);
            console.error('‚ùå Error message:', createError.message);
            console.error('‚ùå Error sqlMessage:', createError.sqlMessage);
        }
        
        // Test 7: Ki·ªÉm tra validation
        console.log('\n7Ô∏è‚É£ Test validation...');
        
        // Test email tr√πng l·∫∑p
        try {
            const duplicateUser = await User.create({
                name: 'Duplicate User',
                email: 'admin@example.com', // Gi·∫£ s·ª≠ email n√†y ƒë√£ t·ªìn t·∫°i
                phone: '0123456789',
                password: '123456',
                role: 'user'
            });
            console.log('‚ùå Kh√¥ng n√™n t·∫°o ƒë∆∞·ª£c user v·ªõi email tr√πng l·∫∑p');
        } catch (error) {
            console.log('‚úÖ ƒê√∫ng: Kh√¥ng th·ªÉ t·∫°o user v·ªõi email tr√πng l·∫∑p');
            console.log('   Error code:', error.code);
            console.log('   Error message:', error.message);
        }
        
        console.log('\nüéâ Test database ho√†n th√†nh!');
        
    } catch (error) {
        console.error('‚ùå L·ªói trong test database:', error);
        console.error('‚ùå Error code:', error.code);
        console.error('‚ùå Error message:', error.message);
    } finally {
        // ƒê√≥ng k·∫øt n·ªëi
        await db.end();
        console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
    }
}

// Ch·∫°y test
testDatabase().catch(console.error);


