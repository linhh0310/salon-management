const mysql = require('mysql2/promise');

async function checkChatDatabase() {
    let connection;
    
    try {
        // K·∫øt n·ªëi database
        connection = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '11223344',
            database: 'salon_db'
        });

        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database th√†nh c√¥ng');

        // Ki·ªÉm tra b·∫£ng chat_messages
        console.log('\nüìã Ki·ªÉm tra b·∫£ng chat_messages:');
        const [chatTables] = await connection.execute("SHOW TABLES LIKE 'chat_messages'");
        
        if (chatTables.length === 0) {
            console.log('‚ùå B·∫£ng chat_messages kh√¥ng t·ªìn t·∫°i!');
            console.log('üîß ƒêang t·∫°o b·∫£ng chat_messages...');
            
            const createTableSQL = `
                CREATE TABLE chat_messages (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    sender_id INT NOT NULL,
                    sender_type ENUM('customer', 'admin') NOT NULL,
                    receiver_id INT NOT NULL,
                    receiver_type ENUM('customer', 'admin') NOT NULL,
                    message TEXT NOT NULL,
                    message_type ENUM('text', 'image', 'file') DEFAULT 'text',
                    is_read BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    
                    INDEX idx_sender (sender_id, sender_type),
                    INDEX idx_receiver (receiver_id, receiver_type),
                    INDEX idx_conversation (sender_id, sender_type, receiver_id, receiver_type),
                    INDEX idx_created_at (created_at)
                )
            `;
            
            await connection.execute(createTableSQL);
            console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng chat_messages th√†nh c√¥ng');
        } else {
            console.log('‚úÖ B·∫£ng chat_messages ƒë√£ t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra b·∫£ng contacts
        console.log('\nüìã Ki·ªÉm tra b·∫£ng contacts:');
        const [contactTables] = await connection.execute("SHOW TABLES LIKE 'contacts'");
        
        if (contactTables.length === 0) {
            console.log('‚ùå B·∫£ng contacts kh√¥ng t·ªìn t·∫°i!');
            console.log('üîß ƒêang t·∫°o b·∫£ng contacts...');
            
            const createContactsSQL = `
                CREATE TABLE contacts (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    email VARCHAR(255) NOT NULL,
                    phone VARCHAR(20),
                    message TEXT NOT NULL,
                    is_read BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    
                    INDEX idx_email (email),
                    INDEX idx_created_at (created_at),
                    INDEX idx_is_read (is_read)
                )
            `;
            
            await connection.execute(createContactsSQL);
            console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng contacts th√†nh c√¥ng');
        } else {
            console.log('‚úÖ B·∫£ng contacts ƒë√£ t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra d·ªØ li·ªáu trong chat_messages
        console.log('\nüìä D·ªØ li·ªáu trong chat_messages:');
        const [chatMessages] = await connection.execute('SELECT * FROM chat_messages ORDER BY created_at DESC LIMIT 10');
        
        if (chatMessages.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu chat n√†o!');
            console.log('üîß ƒêang th√™m d·ªØ li·ªáu test...');
            
            const testMessages = [
                [1, 'customer', 1, 'admin', 'Ch√†o admin, t√¥i mu·ªën h·ªèi v·ªÅ d·ªãch v·ª• c·∫Øt t√≥c'],
                [1, 'admin', 1, 'customer', 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ d·ªãch v·ª• c·∫Øt t√≥c?'],
                [1, 'customer', 1, 'admin', 'Gi√° c·∫Øt t√≥c l√† bao nhi√™u v·∫≠y?'],
                [1, 'admin', 1, 'customer', 'Gi√° c·∫Øt t√≥c t·ª´ 90,000 VNƒê b·∫°n nh√©!'],
                [2, 'customer', 1, 'admin', 'Ch√†o admin, t√¥i mu·ªën ƒë·∫∑t l·ªãch'],
                [1, 'admin', 2, 'customer', 'Ch√†o b·∫°n! B·∫°n mu·ªën ƒë·∫∑t l·ªãch d·ªãch v·ª• g√¨?']
            ];

            for (const message of testMessages) {
                await connection.execute(
                    'INSERT INTO chat_messages (sender_id, sender_type, receiver_id, receiver_type, message) VALUES (?, ?, ?, ?, ?)',
                    message
                );
            }
            
            console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu test th√†nh c√¥ng');
        } else {
            console.log(`‚úÖ C√≥ ${chatMessages.length} tin nh·∫Øn trong database`);
            console.table(chatMessages.slice(0, 5));
        }

        // Ki·ªÉm tra d·ªØ li·ªáu trong contacts
        console.log('\nüìä D·ªØ li·ªáu trong contacts:');
        const [contacts] = await connection.execute('SELECT * FROM contacts ORDER BY created_at DESC LIMIT 5');
        
        if (contacts.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu contact n√†o!');
            console.log('üîß ƒêang th√™m d·ªØ li·ªáu test...');
            
            const testContacts = [
                ['Nguy·ªÖn VƒÉn A', 'nguyenvana@email.com', '0123456789', 'T√¥i mu·ªën h·ªèi v·ªÅ d·ªãch v·ª• c·∫Øt t√≥c nam'],
                ['Tr·∫ßn Th·ªã B', 'tranthib@email.com', '0987654321', 'C√≥ th·ªÉ ƒë·∫∑t l·ªãch online kh√¥ng?'],
                ['L√™ VƒÉn C', 'levanc@email.com', '0369852147', 'Gi√° nhu·ªôm t√≥c l√† bao nhi√™u?']
            ];

            for (const contact of testContacts) {
                await connection.execute(
                    'INSERT INTO contacts (name, email, phone, message) VALUES (?, ?, ?, ?)',
                    contact
                );
            }
            
            console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu contact test th√†nh c√¥ng');
        } else {
            console.log(`‚úÖ C√≥ ${contacts.length} tin nh·∫Øn contact trong database`);
            console.table(contacts.slice(0, 3));
        }

        // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
        console.log('\nüîç C·∫•u tr√∫c b·∫£ng chat_messages:');
        const [chatStructure] = await connection.execute('DESCRIBE chat_messages');
        console.table(chatStructure);

        console.log('\nüîç C·∫•u tr√∫c b·∫£ng contacts:');
        const [contactStructure] = await connection.execute('DESCRIBE contacts');
        console.table(contactStructure);

        console.log('\nüéâ Ki·ªÉm tra database ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

checkChatDatabase();

