const mysql = require('mysql2/promise');

async function checkAppointmentsDatabase() {
    let connection;
    
    try {
        // K·∫øt n·ªëi database
        connection = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '11223344',
            database: 'salon_db'
        });

        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database th√†nh c√¥ng');

        // Ki·ªÉm tra b·∫£ng appointments
        console.log('\nüìã Ki·ªÉm tra b·∫£ng appointments:');
        const [appointmentTables] = await connection.execute("SHOW TABLES LIKE 'appointments'");
        
        if (appointmentTables.length === 0) {
            console.log('‚ùå B·∫£ng appointments kh√¥ng t·ªìn t·∫°i!');
            console.log('üîß ƒêang t·∫°o b·∫£ng appointments...');
            
            const createTableSQL = `
                CREATE TABLE appointments (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id INT NOT NULL,
                    service_id INT NOT NULL,
                    stylist_id INT NOT NULL,
                    appointment_date DATE NOT NULL,
                    appointment_time TIME NOT NULL,
                    notes TEXT,
                    status ENUM('pending', 'confirmed', 'completed', 'cancelled') DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,
                    FOREIGN KEY (stylist_id) REFERENCES stylists(id) ON DELETE CASCADE,
                    
                    INDEX idx_user_id (user_id),
                    INDEX idx_service_id (service_id),
                    INDEX idx_stylist_id (stylist_id),
                    INDEX idx_appointment_date (appointment_date),
                    INDEX idx_status (status),
                    INDEX idx_user_date (user_id, appointment_date)
                )
            `;
            
            await connection.execute(createTableSQL);
            console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng appointments th√†nh c√¥ng');
        } else {
            console.log('‚úÖ B·∫£ng appointments ƒë√£ t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra b·∫£ng services
        console.log('\nüìã Ki·ªÉm tra b·∫£ng services:');
        const [serviceTables] = await connection.execute("SHOW TABLES LIKE 'services'");
        
        if (serviceTables.length === 0) {
            console.log('‚ùå B·∫£ng services kh√¥ng t·ªìn t·∫°i!');
            console.log('üîß ƒêang t·∫°o b·∫£ng services...');
            
            const createServicesSQL = `
                CREATE TABLE services (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    description TEXT,
                    price DECIMAL(10,2) NOT NULL,
                    duration INT DEFAULT 60,
                    category VARCHAR(100),
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    
                    INDEX idx_category (category),
                    INDEX idx_is_active (is_active)
                )
            `;
            
            await connection.execute(createServicesSQL);
            console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng services th√†nh c√¥ng');
        } else {
            console.log('‚úÖ B·∫£ng services ƒë√£ t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra b·∫£ng stylists
        console.log('\nüìã Ki·ªÉm tra b·∫£ng stylists:');
        const [stylistTables] = await connection.execute("SHOW TABLES LIKE 'stylists'");
        
        if (stylistTables.length === 0) {
            console.log('‚ùå B·∫£ng stylists kh√¥ng t·ªìn t·∫°i!');
            console.log('üîß ƒêang t·∫°o b·∫£ng stylists...');
            
            const createStylistsSQL = `
                CREATE TABLE stylists (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    specialization VARCHAR(255),
                    experience INT DEFAULT 0,
                    image_url VARCHAR(500),
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    
                    INDEX idx_is_active (is_active)
                )
            `;
            
            await connection.execute(createStylistsSQL);
            console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng stylists th√†nh c√¥ng');
        } else {
            console.log('‚úÖ B·∫£ng stylists ƒë√£ t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra d·ªØ li·ªáu trong services
        console.log('\nüìä D·ªØ li·ªáu trong services:');
        const [services] = await connection.execute('SELECT * FROM services ORDER BY id LIMIT 5');
        
        if (services.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu services n√†o!');
            console.log('üîß ƒêang th√™m d·ªØ li·ªáu services...');
            
            const testServices = [
                ['C·∫Øt t√≥c nam', 'C·∫Øt t√≥c nam theo ki·ªÉu hi·ªán ƒë·∫°i', 90000, 30, 'D·ªãch v·ª• t√≥c'],
                ['C·∫Øt t√≥c n·ªØ', 'C·∫Øt t√≥c n·ªØ theo xu h∆∞·ªõng m·ªõi nh·∫•t', 120000, 45, 'D·ªãch v·ª• t√≥c'],
                ['Nhu·ªôm t√≥c', 'Nhu·ªôm t√≥c v·ªõi m√†u s·∫Øc ƒë·∫πp', 250000, 120, 'D·ªãch v·ª• t√≥c'],
                ['U·ªën t√≥c', 'U·ªën t√≥c t·∫°o ki·ªÉu', 300000, 150, 'D·ªãch v·ª• t√≥c'],
                ['G·ªôi d∆∞·ª°ng', 'G·ªôi v√† d∆∞·ª°ng t√≥c chuy√™n nghi·ªáp', 80000, 60, 'Th∆∞ gi√£n'],
                ['Massage ƒë·∫ßu', 'Massage th∆∞ gi√£n ƒë·∫ßu v√† c·ªï', 100000, 45, 'Th∆∞ gi√£n']
            ];

            for (const service of testServices) {
                await connection.execute(
                    'INSERT INTO services (name, description, price, duration, category) VALUES (?, ?, ?, ?, ?)',
                    service
                );
            }
            
            console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu services th√†nh c√¥ng');
        } else {
            console.log(`‚úÖ C√≥ ${services.length} d·ªãch v·ª• trong database`);
            console.table(services.slice(0, 3));
        }

        // Ki·ªÉm tra d·ªØ li·ªáu trong stylists
        console.log('\nüìä D·ªØ li·ªáu trong stylists:');
        const [stylists] = await connection.execute('SELECT * FROM stylists ORDER BY id LIMIT 5');
        
        if (stylists.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu stylists n√†o!');
            console.log('üîß ƒêang th√™m d·ªØ li·ªáu stylists...');
            
            const testStylists = [
                ['Nguy·ªÖn VƒÉn A', 'C·∫Øt t√≥c nam', 5, '/images/stylist1.jpg'],
                ['Tr·∫ßn Th·ªã B', 'Nhu·ªôm t√≥c', 8, '/images/stylist2.jpg'],
                ['L√™ VƒÉn C', 'U·ªën t√≥c', 6, '/images/stylist3.jpg'],
                ['Ph·∫°m Th·ªã D', 'G·ªôi d∆∞·ª°ng', 3, '/images/stylist4.jpg']
            ];

            for (const stylist of testStylists) {
                await connection.execute(
                    'INSERT INTO stylists (name, specialization, experience, image_url) VALUES (?, ?, ?, ?)',
                    stylist
                );
            }
            
            console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu stylists th√†nh c√¥ng');
        } else {
            console.log(`‚úÖ C√≥ ${stylists.length} stylist trong database`);
            console.table(stylists.slice(0, 3));
        }

        // Ki·ªÉm tra d·ªØ li·ªáu trong appointments
        console.log('\nüìä D·ªØ li·ªáu trong appointments:');
        const [appointments] = await connection.execute('SELECT * FROM appointments ORDER BY created_at DESC LIMIT 5');
        
        if (appointments.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ l·ªãch h·∫πn n√†o!');
        } else {
            console.log(`‚úÖ C√≥ ${appointments.length} l·ªãch h·∫πn trong database`);
            console.table(appointments.slice(0, 3));
        }

        // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
        console.log('\nüîç C·∫•u tr√∫c b·∫£ng appointments:');
        const [appointmentStructure] = await connection.execute('DESCRIBE appointments');
        console.table(appointmentStructure);

        console.log('\nüîç C·∫•u tr√∫c b·∫£ng services:');
        const [serviceStructure] = await connection.execute('DESCRIBE services');
        console.table(serviceStructure);

        console.log('\nüîç C·∫•u tr√∫c b·∫£ng stylists:');
        const [stylistStructure] = await connection.execute('DESCRIBE stylists');
        console.table(stylistStructure);

        console.log('\nüéâ Ki·ªÉm tra database appointments ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

checkAppointmentsDatabase();

