const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const { body } = require('express-validator');

// Middleware ki·ªÉm tra ƒëƒÉng nh·∫≠p
const requireAuth = (req, res, next) => {
  console.log('üîç Ki·ªÉm tra auth middleware...');
  console.log('Session ID:', req.sessionID);
  console.log('Session user:', req.session.user);
  console.log('Session data:', req.session);
  
  if (!req.session.user) {
    console.log('‚ùå User ch∆∞a ƒëƒÉng nh·∫≠p, redirect to login');
    req.flash('error', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c');
    return res.redirect('/login');
  }
  
  console.log('‚úÖ User ƒë√£ ƒëƒÉng nh·∫≠p:', req.session.user.name);
  next();
};

// Validation cho ƒëƒÉng k√Ω
const registerValidation = [
  body('name').notEmpty().withMessage('T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('email').isEmail().withMessage('Email kh√¥ng h·ª£p l·ªá'),
  body('phone').notEmpty().withMessage('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('password').isLength({ min: 6 }).withMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'),
  body('confirmPassword').notEmpty().withMessage('Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u').custom((value, { req }) => {
    if (value !== req.body.password) {
      throw new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
    }
    return true;
  }).withMessage('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp')
];

// Validation cho ƒëƒÉng nh·∫≠p
const loginValidation = [
  body('email').isEmail().withMessage('Email kh√¥ng h·ª£p l·ªá'),
  body('password').notEmpty().withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
];

// Validation cho ƒë·∫∑t l·ªãch
const bookingValidation = [
  body('service_id').notEmpty().withMessage('Vui l√≤ng ch·ªçn d·ªãch v·ª•'),
  body('stylist_id').notEmpty().withMessage('Vui l√≤ng ch·ªçn stylist'),
  body('appointment_date').notEmpty().withMessage('Vui l√≤ng ch·ªçn ng√†y'),
  body('appointment_time').notEmpty().withMessage('Vui l√≤ng ch·ªçn gi·ªù')
];

// Trang ch·ªß
router.get('/', userController.getHome);

// ƒêƒÉng k√Ω
router.get('/register', userController.getRegister);
router.post('/register', registerValidation, userController.postRegister);

// Test route ƒë·ªÉ ki·ªÉm tra ƒëƒÉng k√Ω
router.post('/test-register', async (req, res) => {
  try {
    console.log('üß™ Test registration route');
    console.log('üìã Body:', req.body);
    console.log('üìã Headers:', req.headers);
    
    const { name, email, phone, password } = req.body;
    
    if (!name || !email || !phone || !password) {
      return res.json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
        data: { name, email, phone, password: password ? '***' : undefined }
      });
    }
    
    const User = require('../models/userModel');
    const userId = await User.create({ name, email, phone, password, role: 'customer' });
    
    res.json({
      success: true,
      message: 'Test registration successful',
      userId: userId
    });
  } catch (error) {
    console.error('Test registration error:', error);
    res.json({
      success: false,
      message: error.message
    });
  }
});

// ƒêƒÉng nh·∫≠p
router.get('/login', userController.getLogin);
router.post('/login', loginValidation, userController.postLogin);

// ƒêƒÉng xu·∫•t
router.get('/logout', userController.logout);

// Dashboard user (c·∫ßn ƒëƒÉng nh·∫≠p) - ƒê√£ x√≥a ƒë·ªÉ admin chuy·ªÉn th·∫≥ng ƒë·∫øn admin dashboard
// router.get('/dashboard', requireAuth, userController.getDashboard);

// Test route ƒë·ªÉ ki·ªÉm tra session
router.get('/test-session', (req, res) => {
  console.log('üß™ Test session route');
  console.log('Session ID:', req.sessionID);
  console.log('Session:', req.session);
  console.log('User:', req.session.user);
  res.json({
    sessionID: req.sessionID,
    session: req.session,
    user: req.session.user,
    message: 'Test session route working'
  });
});

// ƒê·∫∑t l·ªãch h·∫πn (c·∫ßn ƒëƒÉng nh·∫≠p)
router.get('/book-appointment', requireAuth, userController.getBookAppointment);
router.post('/book-appointment', requireAuth, bookingValidation, userController.postBookAppointment);

// H·ªßy l·ªãch h·∫πn (c·∫ßn ƒëƒÉng nh·∫≠p)
router.post('/cancel-appointment/:id', requireAuth, userController.cancelAppointment);

// Trang d·ªãch v·ª•
router.get('/services', userController.getServices);

// Trang stylists
router.get('/stylists', userController.getStylists);

// Cart route
router.get('/cart', requireAuth, (req, res) => {
    res.render('cart', {
        title: 'Gi·ªè h√†ng',
        user: req.session.user
    });
});

module.exports = router;
